% A distributed fusion estimation approach based on the robust finite horizon filtering
function [sigma1, Trtheta1, P1, x2, Trtheta2]=RFHDFE_3D_Distributed_Function(T, A, B, C, E, F1, H1, F, a, beta,...
    Q_k, R_k, S_k, M1, M2, tru, z, x1, sigma1, P1, iter,L) 
for m=1:L
    for k=1:iter
        lambda1(3*m-2:3*m,k)=(eye(3)+sigma1(3*m-2:3*m,3*k-2:3*k)*E'*inv(M2(k,m))*E)*...
            sigma1(3*m-2:3*m,3*k-2:3*k)*C(m,:)';% lambda1=sigma1*C'
        delta1(3*m-2:3*m,k)=A*sigma1(3*m-2:3*m,3*k-2:3*k)*...
            (eye(3)+E'*inv(M2(k,m))*E*sigma1(3*m-2:3*m,3*k-2:3*k))*C(m,:)'+...
            (1/a)*F1*H1'+B*S_k(m,1);% delta1=A*sigma1
        % Xi1=C*sigma1
        Xi1(k,m)=C(m,:)*sigma1(3*m-2:3*m,3*k-2:3*k)*...
            (eye(3)+E'*inv(M2(k,m))*E*sigma1(3*m-2:3*m,3*k-2:3*k))*C(m,:)'+...
            (1/a)*H1*H1'+R_k(m,m);
        % theta1=E((x(k)-x(k|k))(x(k)-x(k|k))')
        theta1(3*m-2:3*m,3*k-2:3*k)=sigma1(3*m-2:3*m,3*k-2:3*k)+...
            sigma1(3*m-2:3*m,3*k-2:3*k)*E'*inv(M1(k,1))*E*sigma1(3*m-2:3*m,3*k-2:3*k)-...
            lambda1(3*m-2:3*m,k)*inv(Xi1(k,1))*lambda1(3*m-2:3*m,k)';
        %     b1(:,t1(k,1))=eig(theta1(:,3*t1(k,1)-2:3*t1(k,1)));
        Trtheta1(k,m)=trace(theta1(3*m-2:3*m,3*k-2:3*k));             % Trace(P1);
        % Filtering parameters C1, K1, A1, L1 
        C1(m,3*k-2:3*k)=C(m,:)*(eye(3)+...
            sigma1(3*m-2:3*m,3*k-2:3*k)*E'*inv(M2(k,m))*E);
        K1(3*m-2:3*m,k)=lambda1(3*m-2:3*m,k)*inv(Xi1(k,m));    
        A1(3*m-2:3*m,3*k-2:3*k)=A*(eye(3)+...
            sigma1(3*m-2:3*m,3*k-2:3*k)*E'*inv(M2(k,m))*E);
        L1(3*m-2:3*m,k)=delta1(3*m-2:3*m,k)*inv(Xi1(k,m));
        x2(3*m-2:3*m,k)=x1(3*m-2:3*m,k)+K1(3*m-2:3*m,k)*...
            (z(k,m)-C1(m,3*k-2:3*k)*x1(3*m-2:3*m,k));         % x2=x(k|k);
        x1(3*m-2:3*m,k+1)=A1(3*m-2:3*m,3*k-2:3*k)*x1(3*m-2:3*m,k)+L1(3*m-2:3*m,k)*...
            (z(k,m)-C1(m,3*k-2:3*k)*x1(3*m-2:3*m,k));           % x1=x(k|k-1);
        % sigma1=E((x(k)-x(k|k-1))(x(k)-x(k|k-1))') 
        sigma1(3*m-2:3*m,3*(k+1)-2:3*(k+1))=A*sigma1(3*m-2:3*m,3*k-2:3*k)*...
            (eye(3)+E'*inv(M2(k,m))*E*sigma1(3*m-2:3*m,3*k-2:3*k))*A'-...
            delta1(3*m-2:3*m,k)*inv(Xi1(k,m))*delta1(3*m-2:3*m,k)'+...
            B*Q_k*B'+(1/a)*F1*F1';  
        %     b2(:,t1(k,1)+1)=eig(sigma1(:,3*(t1(k,1)+1)-2:3*(t1(k,1)+1)));
        % P1=x(k)*x(k)'; 
        P1(:,3*(k+1)-2:3*(k+1))=A*P1(:,3*k-2:3*k)*A'+...
            A*P1(:,3*k-2:3*k)*E'*inv(M1(k,1))*E*P1(:,3*k-2:3*k)*A'+...
            (1/a)*F1*F1'+B*Q_k*B';
        %               b3(:,t1(k,1)+1)=eig(P1(:,3*(t1(k,1)+1)-2:3*(t1(k,1)+1)));
    end
end
sigma2(1:9,1:9)=sigma1(1:9,1:9);
I1=[eye(3)  eye(3)  eye(3)]';
for k=1:iter
    for i=1:L
        for j=1:L
                sigma2(3*i-2:3*i,3*(j+L*k)-2:3*(j+L*k))=...
                    (A-L1(3*i-2:3*i,k)*C(i,:))*sigma2(3*i-2:3*i,3*(j+L*(k-1))-2:3*(j+L*(k-1)))*(A-L1(3*j-2:3*j,k)*C(j,:))'+...
                    B*Q_k*B'+L1(3*i-2:3*i,k)*R_k(i,j)*L1(3*j-2:3*j,k)'+...
                    (A-A1(3*i-2:3*i,3*k-2:3*k)+L1(3*i-2:3*i,k)*(C1(i,3*k-2:3*k)-C(i,:)))*...
                    (P1(:,3*k-2:3*k)-sigma2(3*i-2:3*i,3*(j+L*(k-1))-2:3*(j+L*(k-1))))*...
                    (A-A1(3*j-2:3*j,3*k-2:3*k)+L1(3*j-2:3*j,k)*(C1(j,3*k-2:3*k)-C(j,:)))+...
                    ((A-L1(3*i-2:3*i,k)*C(i,:))*sigma2(3*i-2:3*i,3*(i+L*(k-1))-2:3*(i+L*(k-1)))+...
                    (A-A1(3*i-2:3*i,3*k-2:3*k)+L1(3*i-2:3*i,k)*(C1(i,3*k-2:3*k)-C(i,:)))*...
                    (P1(:,3*k-2:3*k)-sigma2(3*i-2:3*i,3*(i+L*(k-1))-2:3*(i+L*(k-1)))))*...
                    E'*inv(M2(k,i))*E*...                    
                    ((A-L1(3*i-2:3*i,k)*C(i,:))*sigma2(3*i-2:3*i,3*(i+L*(k-1))-2:3*(i+L*(k-1)))+...
                    (A-A1(3*i-2:3*i,3*k-2:3*k)+L1(3*i-2:3*i,k)*(C1(i,3*k-2:3*k)-C(i,:)))*...
                    (P1(:,3*k-2:3*k)-sigma2(3*i-2:3*i,3*(i+L*(k-1))-2:3*(i+L*(k-1)))))'+...
                    +(1/a)*(F1-L1(3*i-2:3*i,k)*H1)*(F1-L1(3*j-2:3*j,k)*H1)'-...
                    B*S_k(j,1)*L1(3*j-2:3*j,k)'-L1(3*i-2:3*i,k)*S_k(i,1)'*B';
        end
    end
      Pi1(:,3*k-2:3*k)=inv(I1'*inv(sigma2(:,9*k-8:9*k))*I1);
      Trtheta2(k,1)=trace(Pi1(:,3*k-2:3*k));             % Trace(P1);
%       Omega1(:,9*k-8:9*k)=0.5*Pi1(:,3*k-2:3*k)*I1'*inv(sigma2(:,9*k-8:9*k));
%       x4(:,k)=Omega1(:,9*k-8:9*k)*x3(:,k) ;
end